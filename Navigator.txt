1. React Navigation 이란?
React-Native 에서 사용하는 화면 이동을 위한 라이브러리
- Stack, BottomTab, Drawer 등

2. 구성요소
- Navigator + Screen
- Navigator: Navigation 이 어떤 구조로 되어있는지 나타내는 컴포넌트 (Screen 의 집합)
- Screen: 화면을 그리는 컴포넌트

    2-1. Stack Navigator
    - Stack 과 동일한 자료 구조로 화면을 그리는 Navigator
    - 제일 마지막에 들어온 화면이 제일 먼저 없어짐
    - React-Navigation 에서 필요한 애니메이션 등은 구현됨
    - Stack Navigator: Js 로 작성, 자유도 높음
    - Native Stack Navigator: Native 로 작성, 자유도 낮음

    2-2. Drawer Navigator
    - 슬라이드를 통해서 이동할 Screen 들을 나타내는 Navigator
    - Drawer 에 대한 open, close, toggle 등 기본적인 기능들을 함수로 제공
    - Gmail, LinkedIn 등에서 사용

    2-3. Tab Navigator
    - 가장 흔하게 앱에서 볼 수 있는 UI
    - 기본적으로 하단에 탭의 형태로 제공
    - Material UI 를 통해서 제공하는 별도 UI 도 제공 (Material Bottom Tabs Navigator, Material Top Tabs Navigator)

3. React Component Life Cycle
- constructor > render > componentDidMount > componentWillUnmount

4. 용어 정리
- Navigator: 화면을 어떻게 그려줄지 결정해주는 리액트 컴포넌트 (aka 책 겉표지)
- Navigation Container: 전체 Navigator 를 관리해주는 역할
- Router: Navigation 의 상태나 동작을 제어해주는 함수의 집합. 주로 화면간 데이터 전달을 위해 사용
- Screen: 화면을 그려주는 컴포넌트 (aka 책에서 종이 한장)
- Navigation Prop: 화면 이동에 대한 함수들을 공통으로 제공
- Route Prop: 파라미터를 받아오거나 어떤 화면인지 이름을 알 수 있는 값들을 제공 해주는 역할
- Navigation State: 현재 React Navigation 이 어떤 상태인지를 알 수 있는 값, 주로 Stack Navigator 이전 Stack 에 어떤 Screen 이 있는지 찾기 위해 사용
- Route: Screen 의 Name, Key, Param 등을 저장하는 개념, 어떤 화면인지 식별하기 위해 사용, Navigation State 하위에 Routes 라는 배열에서 찾을 수 있음

5. Presentation 옵션 (Stack)
- Stack Navigator 에서 화면 이동 애니메이션에 대한 설정 옵션
- Card: 오른쪽에서 왼쪽으로 이동하는 애니메이션
- Modal: 아래에서 위로 이동하는 애니메이션

6. BackBehavior 옵션 (Tab)
- Android 에서 H/W Back Button 을 눌렀을 떄 어떻게 이동하는지 지정
- firstRoute: 선언상 제일 처음에 있는 탭으로 이동
- initialRoute: 최초 지정한 탭으로 이동
- order: 탭을 선언한 순으로 이동
- history: 이동한 히스토리 역순으로 이동

7. Nesting Navigator 란?
- Navigator 의 Screen 을 Component 가 아닌 다른 Navigator 로 선언하는 것.
- 주로, Presentation 을 다르게 선언하거나, 조건에 따라 Navigator 의 분기가 필요할 때 사용

    * Nesting Navigator 사용시 주의점 1
        - Navigator 는 각자의 History 를 가지고 있음
    * Nesting Navigator 사용시 주의점 2
        - Navigator에서 Screen Param 은 전달되지 않음
    * Nesting Navigator 사용시 주의점 3
        - B Navigator 에서 동작할 수 없으면 A Navigator 로 전달 (Navigator B에서 Screen B를 보여주려고 한다면?)
    * Nesting Navigator 사용시 주의점 4
        - Navigator A의 이벤트를 Navigator B 에서 받아 볼 수는 없음
        - focus, blur 등 필요한 경우 getParent 로 찾아 등록해야 함
    * Nesting Navigator 사용시 주의점 5
        - Tab, Drawer 의 하위 Navigator 일 경우 Tab 또는 Drawer 에 가려짐

8. DeepLink
- 특정 URL 을 누르게 되면 지정한 화면으로 이동하는 것
- 앱마다 유효한 scheme을 가지고 있는 것

    * Universal Link, App Links
        - 무단으로 Scheme 을 빼앗아 가는 현상을 막기 위함
        - 각각 플랫폼에서의 도메인 인증단계를 통과 해야함

9. Action
- 화면 이동에 대한 명령어를 담고 있는 Object (ex: 책에서 N페이지로 이동, 이전페이지로 돌아가기 등)

    * type: 어떤 작업인지 나타내는 식별자 (필수!)
    * payload: 추가 정보가 포함되어 있음(parameter) (선택사항!)
    * CommonAction
        + navigate: 특정 화면으로 이동하는 action
        + reset: 현재 상태를 지정한 상태로 변경해주는 action (로그인/로그아웃 시 사용)
        + goBack: 이전 히스토리로 이동해주는 action
    * StackAction
        + push: 새로운 화면을 최상단에 넣는 것
        + pop: 현재 보이고 있는 화면을 꺼내는 것
    * TabAction
        + jumpTo: 탭간 이동해야 할 때 사용